name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch: # Evento que aciona o fluxo de trabalho manualmente
    inputs: # Define os inputs do fluxo de trabalho
      name: # Define o input "name"
        description: 'Trigger manual do Workflow' # Descrição do input

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Build Docker image
      run: cd nodejs && docker build -t nodejs-ci-cd .

    - name: Push Docker image to Docker Hub
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        DOCKER_REPOSITORY: ${{ vars.DOCKER_REPOSITORY }}
        COMMIT_SHA: ${{ github.sha }}
        COMMIT_ACTOR: ${{ github.actor }}
      run: |
        echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
        docker tag nodejs-ci-cd $DOCKER_REPOSITORY/nodejs-ci-cd:$COMMIT_ACTOR-$COMMIT_SHA
        docker push $DOCKER_REPOSITORY/nodejs-ci-cd:$COMMIT_ACTOR-$COMMIT_SHA

    - name: Run Docker image
      env:
        DOCKER_REPOSITORY: ${{ vars.DOCKER_REPOSITORY }}
        COMMIT_ACTOR: ${{ github.actor }}
        COMMIT_SHA: ${{ github.sha }}
      run: docker run -d -p 8080:8080 --name nodejs $DOCKER_REPOSITORY/nodejs-ci-cd:$COMMIT_ACTOR-$COMMIT_SHA

    - name: Wait for Container to be ready # Espera o container estar pronto
      run: sleep 10 # Espera 10 segundos

    - name: Check if container is running # Verifica se o container está rodando
      run: docker ps -f 'name=nodejs' # Checa se o container está rodando

    - name: Test Docker image
      run: curl http://localhost:8080

  cloud_run:
    name: Deploy on Cloud Run # Nome do trabalho
    runs-on: ubuntu-latest # Sistema operacional em que o trabalho será executado (no caso, Ubuntu)
    needs: build # Define que o trabalho depende do trabalho "build"
    permissions:
      contents: 'read'
      id-token: 'write'
    
    steps:

    - name: Checkout repository # Faz o checkout do repositório
      uses: actions/checkout@v2 # Usa a ação de checkout do repositório

    - name: Deploy on Cloud Run # Faz o deploy da aplicação no Cloud Run
      uses: 'google-github-actions/auth@v2' # Usa a ação de autenticação do Google Cloud
      with: # Define os parâmetros da ação
        workload_identity_provider: ${{ secrets.WORKLOAD_IDENTIFIER_PROVIDER }} # Define o provedor de identidade do workload
        service_account: ${{ secrets.SERVICE_ACCOUNT }} # Define a conta de serviço
      
    - id: 'deploy' # Define um ID para o passo
      env:
        DOCKER_REPOSITORY: ${{ vars.DOCKER_REPOSITORY }}
        COMMIT_SHA: ${{ github.sha }}
        COMMIT_ACTOR: ${{ github.actor }}
      uses: 'google-github-actions/deploy-cloudrun@v2' # Usa a ação de deploy no Cloud Run
      with: # Define os parâmetros da ação
        service: "$COMMIT_ACTOR" # Define o nome do serviço no Cloud Run
        image: "$DOCKER_REPOSITORY/nodejs-ci-cd:$COMMIT_ACTOR-$COMMIT_SHA" # Define a imagem a ser usada no Cloud Run
        flags: '--allow-unauthenticated' # Define as flags para o deploy no Cloud Run que libera o acesso para usuários não autenticados

    - name: 'Access Cloud Run' # Usa o CLI do Google Cloud
      run: "curl -s ${{ steps.deploy.outputs.url }}" # Acessa o Cloud Run
      continue-on-error: true # Continua a execução mesmo se houver erro